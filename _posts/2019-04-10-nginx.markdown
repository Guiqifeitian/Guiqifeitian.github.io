---
categories: blog
date: '2019-04-10 16:16:18'
description: it is for nginx
layout: post
published: True
title: "Nginx it?"
---

# 一、简介
##### nginx是轻量级、高性能的web服务器和反向代理服务器
```conf
user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;  #定义错误日志存放地址和等级
pid        /var/run/nginx.pid; #定义pid文件存放地址
events {
    worker_connections  1024; #最大并发数
}
http {
client_max_body_size 10m; #单次请求的最大字节数
    include       /etc/nginx/mime.types; #文件扩展名和类型映射表
    default_type  application/octet-stream;     #默认文件类型
    log_format  main  '$remote_addr -$remote_user  [$time_local] "$request"  '
                      '  $status $body_bytes_sent "$http_referer"'
                      ' "$http_user_agent" "$http_x_forwarded_for"';    #定义一个名字叫main的日志格式
    access_log  /var/log/nginx/access.log  main;    #访问日志存储路径以及使用main格式的日志
    sendfile        on; # 开启高效传输模式
    tcp_nopush     on;    #累积数据包大小到一定量和响应头一起发送
    tcp_nodelay     on;    #禁用naggle算法，立即发送缓冲区数据,对keep-alived有效
    keepalive_timeout  65;    #长连接超时
   #gzip  on;    
    include /etc/nginx/conf.d/*.conf; #导入路由转发文件
server {
   server_name mobileprj.rd.tp-link.net; #监听的域名
   listen 80;#监听的端口
   location /redmine { #根据路径分发
   proxy_redirect off; #隐藏反向代理的服务器的头信息
   proxy_set_header Host $host; #设置转发请求头的host，保留此设置，避免反向代理时无限循环重定向
   proxy_set_header X-Real-IP $remote_addr; #设置转发请求的头的X-Real-IP
   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;# 设置转发请求头的X-Forwarded-For
   proxy_set_header User-Agent $http_user_agent; #设置转发请求头的User-Agent
   proxy_pass http://172.17.0.1:8095;    #设置转发的服务地址
   }
}
}
```

# 二、安装
##### 推荐使用源码安装
##### 官网上下载源码后，解压在解压后的目录执行
```shell
./configure #可以在这一步添加配置参数,具体参数可以通过./configure --help命令查看
make && sudo make install
```
##### 对于不同用途，建议采用不同配置
```shell
# 对于网络加速代理
./configure --with-http_ssl_module --with-htpp_realip_module --with-http_geoip_module --with-http_stub_status_module --with-openssl=${BUILD_DIR}/openssl-1.0.1p
# 对于Web服务器
./configure --with-http_stub_status_module
```
##### 当然，可以安装第三方模块，注意依赖关系
```shell
./configure --add-module=<path>#path是第三方模块目录
```

# 三、配置指南

### 基本配置格式
```
<section> {
  <directive> <parameters>;
}
```
### 全局配置参数
```
user #配置worker进程的用户和组，如果忽略了group，则group使用该用户所在的组
worker_processes #worker进程的启动数量，
error_log #错误日志路径和等级
pid #设置记录主进程ID的文件
use #指定使用什么样的连接方法，需要配合events区段
worker_connections #最大并发数
```
### 使用include文件

```conf
include /etc/nginx/conf.d/*.conf;
```

##### 注意这些文件要有正确的nginx语法
### HTTP的server
##### 客户端指令
```
chunked_transfer_encoding #
client_body_buffer_size #设置客户端的缓存大小
client_body_in_file_only #设置为"on"时，将客户端请求体强制写入磁盘文件
client_body_in_single_buffer #强制讲客户端请求体保存在单个缓存中
client_body_temp_path #定义一个路径，用于保存客户端请求体
client_body_timeout #该指令指定客户体成功读取的两个操作之间的时间间隔
client_header_buffer_size #为客户端请求头指定一个缓存大小，当请求头大于1KB会用到这个设置
client_header_timeout #读取整个客户端头的超时时间标准
client_max body_size #允许的客户端的最大请求头
keepalive_disable #对于某些客户端禁用keep-alive功能，比如msie6
keepalive_requests #在一个keep-alive关闭之前可以接收多少个请求
keepalive_timeout #keep-alive连接持续多久
large_client_header_buffers #定义最大数量和最大客户端请求头大小
msie_padding #为了填充响应的大小至512字节，对于 MSIE 客户端，大于400 的状态代码会被添加注释以便满足512字节，通过启用该命令可以阻止这种行为
msie_refresh #对于 MSIE 客户端，该指令可启用发送一个 refresh 头，而不是redirect
```

##### 文件IO指令

```
aio #启用异步文件io，对于linux，需要指定directio大小，当aio生效的时候，就会自动禁用sendfile
directio #可以设置为off或者某个大小值，表示当文件大小大于等于这个值时启用directio，否则使用sendfile，对于大文件，使用aio，节省cpu，对于小文件，使用sendfile，减少拷贝，
directio_alignment #设置directio算法，默认值是512，对于xfs文件系统推荐使用4KB
open_file_cache #配置一个缓存用于存储打开文件描述符、目录查询和文件查询错误
open_file_cache_errors #启动文件查询错误缓存
open_file_cache_min_uses #open_file_cache缓存的文件描述符保留在缓存中
open_file_cache_valid #指定对open_file_cache缓存有效性检查的时间间隔
postpone_output # nginx发送给客户端最小的数值
read_ahead #内核讲预读文件的大小，如果可能的话
sendfile #将文件从磁盘拷贝到内核缓冲区，再将记录数据位置和长度的相关数据保存到socket的相关缓存
sendfile_max_chunk #在一个snedfile中复制最大数据的大小，减少阻塞调用sendfile()所花费的最长时间
```

##### Hash指令

```
server_names_hash_bucket_size #保存server_name散列表大小的桶
server_names_hash_max_size #server_name散列表最大值
types_hash_bucket_size #指定存储散列表的桶的大小
types_hash_max_size # 指定散列类型表的最大值
variables_hash_bucket_size #指定用于存储保留变量桶的大小
variables_hash_max_size #存储保留变量最大散列值的大小
```

##### socket指令

```
lingering_close #该指令指定如何保持客户端的连接，以便用于更多数据的传输
lingering_time #在使用 lingering close 指令的连接中，该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间
lingering_timeout #结合 lingering close ，该指令显示 Nginx 在关闭客户端连接之前，为获得更多数据会等待多久
reset_timedout_connection
send_lowat
send_timeout
tcp_nodelay
tcp_nopush
```

### 虚拟服务器
##### 由关键字server开始的部分都叫虚拟服务器... ...
##### 一个虚拟服务器由listen和server\_name指令组合定义，listen指定定义了一个ip地址/端口组合或者是unix域套接字路径

```conf
listen address [:port];
listen port;
listen unix:path;
```

##### 对于server\_name，其指令相当简单
```
*.example.com
www.example.*
.example.com
~^www\.example\.com$
~^www(\d+).example\.(com)$
```

##### location用于server内部，
```
location [ = | ~ | ~* | ^~ ] uri { ... }
location @name { ... }
---
=：精确匹配（必须全部相等），不可以嵌套location
~：大小写敏感
~*：忽略大小写
^~：只需匹配uri部分
@：内部服务跳转，不可以嵌套location
```
