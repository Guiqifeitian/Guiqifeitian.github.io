---
title: "leetcode"
layout: post
date: "2020-01-20 14:48:18"
categories: blog
published: True
tags: "code"
---

### 无重复字符的最长子串的长度

用临时StringBuffer存储最长子串，如果遇到重复的字符，将已存储的最长子串中的重复位置前的部分全部删除，并记录此时的长度，时间复杂度是O(n),空间复杂度O(n)

```java
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int j =0;
        StringBuffer tmp = new StringBuffer();
        for(int i=0;i< s.length();i++){
            int k = tmp.toString().indexOf(s.substring(i,i+1));
            if(  k != -1  ){
                j = Math.max(j,tmp.length());
                tmp.delete(0,k+1);
            }
            tmp.append(s.charAt(i));
        }
        return Math.max(j,tmp.length());
    }
}
```

### 最长公共前缀


### 非空个位数链表相加


```java
 public static class ListNode {
        int val;
        ListNode next;
        ListNode(int x) { val = x; }
    }

 public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
           int tag = 0;
        ListNode ret = new ListNode(0);
        ListNode hehe = ret;
        while (l1 != null || l2 != null){
            if (l1 ==null){
                ret.val = (l2.val + tag)%10;
                tag = ( l2.val + tag)/10;
                l2 = l2.next;
            }else if (l2 == null){
                ret.val = (l1.val + tag)%10;
                tag = ( l1.val + tag)/10;
                l1 = l1.next;
            }else{
                ret.val = (l1.val + l2.val + tag)%10;
                tag = (l1.val + l2.val + tag)/10;
                l1 = l1.next;
                l2 = l2.next;
            }
            if (l1 == null && l2 == null ){
                if (tag == 1){
                    ret.next = new ListNode(1);
                    ret = ret.next;
                }else {
                    ret.next = null;
                }

            }else {
                ret.next = new ListNode(0);
                ret = ret.next;
            }

        }


        return hehe;
    }
```
