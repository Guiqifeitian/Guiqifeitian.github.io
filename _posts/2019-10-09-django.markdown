---
layout: post
title:  "Django"
date:   2019-10-09 15:50:18
categories: blog
description: something about django
published: true
---

### 部署方式

官方提供了django的镜像，使用容器部署，注意，`/work/django/onlysite`是一个已经编写好的django项目

```
docker volume create --driver local -o type=none -o device=/work/django/onlysite -o o=bind djangovolume
docker run -d --name django -p 8000:8000 -v djangovolume:/usr/src/app -w /usr/src/app django:1.10.4-python3 bash -c "python3 manage.py runserver 0.0.0.0:8000"

docker volume create --driver local -o type=none -o device=/work/postgres -o o=bind postgresvolume
docker run -d --name postgres -p 5432:5432 -v postgres:/var/lib/postgresql/ -e POSTGRES_PASSWORD=passwd postgres:10.10
```

### 创建项目

#### 创建项目Project

```
django-admin.py startproject onlysite
```


#### 在项目里创建应用APP

```
# 在/work/django/onlysite目录中执行
python3 manage.py startapp blog
```

#### 配置settings

编写`/work/django/onlysite/onlysite/settings.py`

```python3
ALLOWED_HOSTS = ['*'] #允许所有IP访问

INSTALLED_APPS = [
... ...
'blog', #添加该应用
]

# 配置数据库
DATABASES = {
    'default':{
        'ENGINE':'django.db.backends.postgresql_psycopg2',
	'NAME':'blog',
	'USER':'django',
	'PORT':'5432',
	'HOST':'127.0.0.1'
    }
}
```

#### 迁移数据库

```
python3 manage.py makemigrationd
python3 manage.py migrate
```

#### 创建超级管理员

```
python3 manage.py createsuperuser
```

#### 编写models

```

# blog/models.py

class Column(models.Model):
    name = models.CharFields('栏目名称'，max_length=256)
    slug = mdoels.CharField('栏目网址',max_length=256,db_index=True)
    intro = models.TextField('栏目简介'，default='')

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '栏目' # 给Column起一个可读的名字
	verbose_name_plural = '栏目' # 以上的名字的复数
	ordering = [ 'name' ]  #返回的记录按照name字段进行排序

class Article(models.Model):
    column = models.ManyToManyField(Column, verbose_name='归属栏目') #生成article_column表，用于存储对应关系
    title = models.CharField('标题',max_length=256)
    slug = models.CharField('网址',max_length=256,db_index=True)
    author = models.ForignKey('auth.User',blank=True,null=True,verbose='作者')

    content = models.TextField('内容',default='',blank=True)
    published = models.BooleanField('正式发布', default=True)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '教程'
        verbose_name_plural = '教程'

```

编写完成之后迁移数据库

#### 添加后台功能

编辑`blog/admin.py`

```
from .models import Column,Article

class ColumnAdmin(admin.ModelAdmin):
    list_display = ('name','slug','intro')

class ArticleAdmin(admin.ModelAdmin):
    list_display = ('title','slug','author')

admin.site.register(Column,ColumnAdmin)
admin.site.register(Aricle,ArticleAdmin)
```

#### 添加DjangoUeditor富文本编辑器

下载DjangoUeditor3，放在blog的同级目录

在settings.py中添加DjangoUeditor这个应用

```
INSTALLED_APPS = (
    ...
     
    'DjangoUeditor',
)
```

在urls.py中添加路由

```
from django.conf.urls import include
from DjangoUeditor import urls as ueditor_urls
from django.conf import settings

urlpatterns = [
...
url(r'^ueditor/',include(ueditor_urls))
]

if settings.DEBUG:
    from django.conf.urls.static import static
    urlpatterns += static(
        settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
```

添加上传图片的地址

修改settings.py

```
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 公共的 static 文件，比如 jquery.js 可以放这里，这里面的文件夹不能包含 STATIC_ROOT
STATICFILES_DIRS = [(os.path.join(BASE_DIR, "common_static"),)]

# upload folder
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
```

修改`blog/models.py`

```
from DjangoUeditor.models import UEditorField



class Article(models.Model):
    ...

    #仅修改 content 字段
    content = UEditorField('内容', height=300, width=1000,
        default=u'', blank=True, imagePath="uploads/images/",
        toolbars='besttome', filePath='uploads/files/')

    ...
```

#### 添加统一模板文件

修改settings.py中配置模板位置TEMPLATES

```
'DIRS': [os.path.join(BASE_DIR, 'templates')]
```

在项目的根目录中的创建目录templates，编写base.html文件

```shell
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,Chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{% block title %}欢迎光临{% endblock title %}</title>

    <!-- Bootstrap -->
    <link href="http://apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css" rel="stylesheet">

    <!-- 引入下面两个库让 IE8 支持 HTML5 元素 -->
    <!-- 警告: Respond.js 通过 file:// 浏览的时候不能正常工作！-->
    <!--[if lt IE 9]>
      <script src="http://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js"></script>
      <script src="http://apps.bdimg.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
    {% block css %}

    {% endblock css %}

    {% block js %}

    {% endblock js %}
  </head>
  <body>
    <div>
        <div>
            {% block content %}
            <h1>首页</h1>
            {% endblock content %}
        </div>
    </div>

    <script src="http://apps.bdimg.com/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="http://apps.bdimg.com/libs/bootstrap/3.3.0/js/bootstrap.min.js"></script>
  </body>
</html>
```


#### 添加前台

在urls.py添加路由

```
url(r'^column/(?P<column_slug>[^/]+)/$',blog_views.column_detail,name='column'),
```

在`blog/views.py`中添加该处理函数

```python
def column_detail(request, column_slug):
    column = Column.objects.get(slug=column_slug)
    return render(request, 'blog/column.html', {'column': column})
```

编写`blog/templates/blog/column.html`

```shell
{% extends "base.html" %}

{% block title %}
{{ column.title }}
{% endblock title %}

{% block content %}
栏目简介：{{ column.intro }}
栏目文章列表：
还需要完善
{% endblock content %}
```
