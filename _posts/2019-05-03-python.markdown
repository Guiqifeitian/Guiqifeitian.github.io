---
categories: blog
date: '2019-05-03 13:11:18'
description: it is so pythonic
layout: post
published: True
title: "something about python"
---

### 使用函数名称调用函数(方法)

##### eval

eval直接将函数字符串名称转换成函数对象

##### locals globals

locals和globals以字典形式分别返回当前位置的全部局部变量和全局变量，这就包括了定义的方法

```
>>> locals()
{'__builtins__': <module '__builtin__' (built-in)>, '__name__': '__main__', 'foo': <function foo at 0x7f4c71cfa5f0>, '__doc__': None, '__package__': None}
```

```python
def foo():
  print "foo"

eval("foo")()

locals()["foo"]()
globals()["foo"]()
```

##### getattr

当通过对象调用函数的时候，可以使用getattr

##### methodcaller

也可以使用operator模块的methodcaller调用函数

```python
class Foo():
  def foo(self):
    print "foo"

f = Foo()
getattr(f,"foo")()

from operator import methodcaller
methodcaller("foo")(f)
```

### \_\_init\_\_ 和 \_\_new\_\_

`__init__`是初始化方法，创建对象后，就立刻被默认调用了，可接收参数。`__init__`中的self参数就是`__new__`返回的对象

`__new__`必须要有返回值，返回实例化出来的实例

### is 和 ==

is是检查对象的标示符是否一致，==是检查俩个对象是否相等,`a is b`就是`id(a) == id(b)`,`a == b`就是`a.__eq__(b)`

### 内存驻留

交互式命令行，对于只包含字母、数字、下划线组成的字符串，python会自动保留一个副本，当创建新的字符串的时候就直接指向该副本,此外的字符串不会驻留在内存中，

```
>>> a = "hello world"
>>> b = "hello world"
>>> a is b
False
```

### 可变对象和不可变对象

可变对象在创建后可改变但是地址不会改变，不可变对象创建后不能改变。字典和列表是可变对象，int、字符串、元组和float是不可变对象

### join和+

在连接列表中的字符串的时候，join会优先计算需要多大的内存，一次性申请，使用+就会一步一步申请，性能比前者差。


### finally

当try语句块中含有break、continue、return的时候，在离开try之前，finally的语句会被执行

### enumerate

```python
for index,value in enumerate(["a","b","c"]):
    print index,value
```

### zip()

```python
for item in zip([1,2,3],[5,6,7]):
    print item
```

### collections

collections中包含除了集合、元素、列表、字典意外的数据类型

```
namedtuple
deque       双端队列
ChainMap   创建多个映射的单一视图，python2似乎没有
Counter 字典的子类，用于对可哈希对象进行计数
OrderedDict 字典子类，可以保留元素的添加顺序
defaultdict 字典子类，可以调用用户自定义的工厂函数设置缺失值
```

```
from collections import namedtuple
City = namedtuple('City','name country population coordinates') #创建了一个City类
tokyo = City('Tokyo','JP','36',(35,139))
print tokyo.population
print tokyo.coordinates
```

### 单例模式

##### 使用模块

python的模块天然就是一个单例，在一个模块中生成一个对象，在其他模块中导入这个对象全部都是同一个对象。因为python在导入模块的时候会生成pyc文件，在导入的从这个pyc文件导入对象

##### 使用装饰器

```python
def Singleton(cls):
    _instance = {}

    def _singleton(*args, **kargs):
        if cls not in _instance:
            _instance[cls] = cls(*args, **kargs)
        return _instance[cls]

    return _singleton
```

##### 使用类

##### 在\_\_new\_\_方法中实现

```python
import threading
class Singleton(object):
    _instance_lock = threading.Lock()

    def __init__(self):
        pass

    def __new__(cls, *args, **kwargs):
        if not hasattr(Singleton, "_instance"):
            with Singleton._instance_lock:
                if not hasattr(Singleton, "_instance"):
                    Singleton._instance = object.__new__(cls)
        return Singleton._instance
```

##### 使用元类

```python
import threading

class SingletonType(type):
    _instance_lock = threading.Lock()
    def __call__(cls, *args, **kwargs):
        if not hasattr(cls, "_instance"):
            with SingletonType._instance_lock:
                if not hasattr(cls, "_instance"):
                    cls._instance = super(SingletonType,cls).__call__(*args, **kwargs)
        return cls._instance

class Foo(metaclass=SingletonType):
    def __init__(self,name):
        self.name = name
```

### 协程

协程通过中断实现，在执行一个协程的时候，可以随时中断，去执行另一个协程;协程是在一个线程中执行，没有线程开换的开销，不需要多线程的锁机制，不存在写变量冲突，控制共享资源不加锁。

python中使用生成器实现对协程的支持

```python
def consumer():
    r = ''
    while True:
        n = yield r
        if not n:
            return
        print('[CONSUMER] Consuming %s...' % n)
        r = '200 OK'

def produce(c):
    c.send(None)
    n = 0
    while n < 5:
        n = n + 1
        print('[PRODUCER] Producing %s...' % n)
        r = c.send(n)
        print('[PRODUCER] Consumer return: %s' % r)
    c.close()

c = consumer()
produce(c)
```

### 常用库函数

#### os

```python
import os

os.name
os.listdir(path)
os.getcwd()
os.path.abspath(path)
os.system(shell)
os.path.dirname(path)
os.path.basename(path)
os.path.join(path1,path2,...)
os.mkdir(path)
os.makedirs(path)
os.chdir(path)
os.path.isfile(path)
os.path.isdir(path)
os.path.exists(path)
```

### 装饰器

#### 用类去做装饰器

可以用于非参数化装饰器

```python
class DecoratorAsClass:
	def __init__(self,function):
		self.func = function

	def __call__(self,*args,**kwargs):
		result = self.func(*args,**kwargs)
		print "hehe"
		return result

def func():
	print "hello"

dac = DecoratorAsClass(func)
dac() # hello,hehe
```

#### 参数化装饰器

```python
def repeat(number=3):
	def actual_repeat(func):
		def wrap(*args,**kwargs):
			for i in range(number):
				result = func(*args,**kwargs)
			return result
		return wrap
	return actual_repeat

# 即使使用默认参数，也需要有括号
@repeat()
def foo():
	print "hehe"
```

#### 保留内省

以上的装饰器会让原函数时区注释文档和函数名称，使用functools可解决问题

```python
from functools import wraps

def preseving_decorator(func):
	@wraps(func)
	def wrap(*args,**kwargs):
		return func(*args,**kwargs)
	return wrap
```

#### 使用场景

- 检查参数
- 缓存：将输出保存在某个变量中，在一定时间内，如果再输入一样的参数，那么输出直接从变量中查询
- 代理：比如flask使用装饰器做路由分发，django使用装饰器做账号认证
- 上下文


### 类装饰器

调用对象自己就是调用call方法

```python
class Animal(object):
	def __call__(self,words):
		print "hello",words

cat = Animal()
cat("hehe") # hello,hehe
```

### 迭代器

实现了迭代器协议的容器对象

- __next__ 返回容器下一个元素
- __iter__ 返回迭代器本身

```python
class CountDown(object):
	def __init__(self, step):
		self.step = step

	def __next__(self):
		if step <= 0:
			raise StopIteration
		self.step -= 1
		return self.step

	def __iter__(self):
		return self
for element in CountDown(4):
    print(element)
```

### yield

使用next获取yield的值

```python3
def fibonacci():
	a,b= 0,1
	while True:
		yield b
		a,b = b,z + b

fib = fibonacci()
next(fib)
next(fib)
next(fib)
```

使用send向yield发送参数

```python3
def psy():
    print("okok")
    while True:
        answer = (yield)
        if answer is not None:
            if answer.endswith('?'):
                print("dont ask more")
            elif 'good' in answer:
                print("nonono")
            else:
                print("whatever")

p = psy()
next(p)
p.send("hehe?")
p.send("not that good")
p.send("jkl")
```

### super多重继承的问题

在多重继承中，在初始化的时候容易产生问题

```python
class A:
    def __init__(self):
        print("A",end="")
        super().__init__()

class B:
    def __init__(self):
        print("B",end="")
        super().__init__()

class C(A,B):
    def __init__(self):
        print("C",end="")
        A.__init__(self)
        B.__init__(self)

C() # 输出是 CABB，因为在A中调用了super().__init__()
```

最佳实践

- 避免多继承
- super使用必须一致，要么全部用super，要么全不用
- 显示的继承object，为了避免代码在python2中混用新式类和旧式类
- 调用父类的时候查看层次结构，使用__mro__

### 描述符

+ \_\_set\_\_(self,obj,type=None)
+ \_\_get\_\_(self,obj,value)
+ \_\_delete\_\_(self,obj)

实现了`__get__()`和`__get__()`的描述符是数据描述符，如果只实现了`__get__()`那就是非数据描述符

在每次查找对象的属性的时候，`__getattribute__()`，会按以下顺序查找属性

1. 该属性是否是实例的类对象的数据描述符
2. 如果不是，那就查看该属性能否在实例的`__dict__`中找到
3. 查看该属性是否是实例的类对象的非数据描述符

python已经使用描述符将类函数绑定为实例方法

#### 延迟求值属性

```python3
class InitOnAccess(object):
	def __init__(self,klass,*args,**kwargs):
		self.klass = klass
		self.args = args
		self.kwargs = kwargs
		self._initialized = None

	def __get__(self,instance,owner):
		if self._initialized is None:
			print('initialized!')
			self._initialized = self.klass(*self.args,**self.kwargs)
		else:
			print('cached')
		return self._initialized

class MyClass():
	lazy_bone = InitOnAccess(list,"argument")

m = MyClass()
m.lazy_bone
m.lazy_bone
```

### property

将属性连接到方法上

```python3
class Rectangle(object):

    def __init__(self,x1,y1,x2,y2):
        self.x1,self.x2,self.y1,self.y2 = x1,x2,y1,y2

    @property
    def width(self):
        return self.x2 - self.x1

    @width.setter
    def width(self,value):
        self.x2 = self.x1 + value


rec = Rectangle(1,5,2,6)
print(rec.width)
rec.width = 10
print(rec.width)
```

### \_\_getattr\_\_

当获取一个对象的某个不存在的属性的时候，就会调用这个对象的这个方法

### \_\_getattribute\_\_

对象的所有属性都会调用这个方法，如果自定义修改的话，比较容易出现无限循环。注意在这个函数里面调用属性的时候使用super

### \_\_slots\_\_

会限制类的实例中可以添加的属性，但是实际上这个是用来优化类的属性存储的，一旦设置了这个属性，解释器就会使用类似命名元组的存储结构进行存储类的属性，而不是使用字典去存储

解释器会忽略继承的`__slots__`属性

如果不把`__weakref__`加入`__slots__`中，该实例就不能作为弱引用


### 元类

python中一切皆对象，是对象就可以在运行时进行修改。如下图
![avatar](/assets/images/metaclass.png)

任何一个实例是一个对象，是对象就是某一个类实例化而生成的；类也是对象，那么也是某一个类实例化生成的，最终是type的实例化，

类都有父类，最终的父类是object类。

可以使用type生成一个实例(类)，

```python3
klass = type('MyClass',(object,),{'method':lambda x:print(1)})

k = klass()
k.method() # 1
```

自定元类的参数与type一致，并且返回另一个类对象即可

```
name:保存在__name__属性中的类的名称
bases:父类的列表，成为__bases__属性
namespace:包含主题空间的映射，将成为__dict__属性
```

元类的模板如下

```python3
class MetaClass(type):
        # 创建具体的类对象
	def __new__(mcs,name,bases,namespace):
		return super().__new__(mcs,name,bases,namespace)

	# 创建namespace对象
	@classmethod
	def __prepare__(mcs,name,bases,**kwargs):
		return super().__prepare__(name,bases,**kwargs)

	# 初始化，此时已经生成类对象cls
	def __init__(cls,name,bases,namespace,**kwargs):
		super().__init__(name,bases,namespace)

	# 覆写类实例创建和初始化的默认方式
	def __call__(cls,*args,**kwargs):
		return super().__call__(*args,**kwargs)
```

实际编写元类的如下

```python3
class RevealingClass(metaclass=RevealingMeta):
	def __new__(cls):
		return super().__new__(cls)

	def __init__(self):
		super().__init__()

# 对应元类的初始化过程 __prepare__  --> __new__ --> __init__
```

### 内置方法和实现的关系

```
abs    -->  __abs__
bool   -->  __bool__
+      -->  __add__
+=     -->  __iadd__
*      -->  __mul__
-      -->  __sub__
/      -->  __truediv__
repr   -->  __repr__ #如果没有__str__，就会使用这个
str    -->  __str__ #print的时候也会调用这个
len    -->  __len__
hash   -->  __hash__
```

### 列表推导

在某些情况下可以替换filter、map

```
[ord(s) for s in "hello world"]
map(lambda x:ord(x),"hello world")
```

### 生成器表达式

和列表推导相比，不用一次性将所有元素生成，而是一个一个生成

```
(ord(s) for s in "hello world")
```

### 可变对象

1. 在函数的参数设置默认值是可变对象，比如是列表，那么这个函数的所有调用都会使用这一个可变对象，而不是在每次调用的时候新建一个
2. 在使用\*进行列表和元组生成的时候，当列表或者元组里面的元素是可变对象的时候，复制后的列表和元组里面是指向同一个对象的

### 可散列对象

一个可散列对象，在其生命周期内，散列值是不变的，这个对象实现了`__hash__`和`__eq__`方法，元组是不可变对象，但是当元组内部存在可变对象元素的时候，这个元组就不是可散列对象

### 字典推导

```python
what = [(1,'beijing',(2,'shenzhen'))]
ever = {city:number for number,city in what}
```

### 不可变映射类型

在python3.3之后，在types模块中有MappingProxyType，这个类会返回一个只读的映射视图

```python3
from types import MappingProxyType
di = {1:"D"}
di_proxy = MappingProxyType(di)
di_proxy[2] = "C" #将会报异常
```
### 集合

集合中的元素是可散列的，但是set本身是不可散列的，frozenset是可以散列的。

集合中自带的中缀运算符

```python3
he = set([1,2,3])
ha = set([2,3,4,5,6])
he & ha
he | ha
ha - he
ha in he
ha <= he
he < ha
he >= ha
he > ha
```

创建集合的时候，使用一下俩种方式，一般俩说前者比后者要更高效，因为针对前者，解释器会利用BUILD\_SET字节码直接创建集合，而后者是利用构造函数创建

```
a={1,2,3}
b=set([1,2,3])
```

集合推导

```
{i for i in range(10)}
```

### 字典中的散列表

散列表是一个稀疏数组，散列表里的单元叫做表元，在字典的散列表中，一个键值对占用一个表元，所有表元的大小相同。

如果俩个对象的比较（==）的时候，那么这俩个对象的散列值也要相同，

在`my_dict[key]`中，解释器会先计算`hash(key)`，根据值的**后几位**去查找表元，如果没找到，就报KeyError，如果不为空，就会在表元里面找到`found_key:found_value`，这个时候解释器就会检验`key==found_key`，如果为真，就会返回found\_value。

如果key和found\_key和key不匹配的话，这种情况情况就是散列冲突。原因是散列值的后几位相同。这时解释器就会在散列值中**另外取几位**，处理过后得到的数字当做索引，寻找新的表元。

1. 键必须是可散列的。

&nbsp;- 用户自定义对象默认是可散列的，散列值由id获取。

2. 字典在内存上开销较大。

&nbsp;- 如果需要需要存放数量巨大的记录，那么最好存放在元组或者具名元组构成的列表

3. 键查询很快

4. 键的次序取决于添加的顺序

5. 向字典里面添加新的键，可能会改变已有键的顺序

&nbsp;- 不要在迭代一个字典的时候修改一个字典

### 字符和字节

把码位转换成字节序列的叫编码，把字节序列转换成码位的过程是解码

二进制不可变bytes和可变bytearray，二者的元素都是位于0-255之间的整数。

```
bytes.fromhex("31 21 0A")
```

### 处理文本文件

在python3中，默认的open函数读取文件的时候自动做必要的解码，在写入文件的时候做必要的编码，python2需要使用io.open()

### reduce

在python3中，reduce被放到functools模块中，而内置的sum函数就可以取代reduce的求和功能

### all和any

```
all([]) #
all([1,2,0]) # 所有元素是真值，返回True
any([1,2,0]) # 有元素是真值，返回True
```

### 仅限关键字参数

在python3中，定义函数时若想指定仅限关键字参数，要把它们放到前面有\*的参数后面。如果不想支持数量不定的定位参数，但是想支持仅限关键字参数，在签名中放一个\*

```python3
def hello(a,*,b=1):
    print(a)
```

`__defaults__` 定位参数的默认值

`__kwdefaults__` 仅限关键字参数的默认值

`__code__.co_varnames` 参数名称，不包括变长参数

`__code__.co_argcount` 参数个数，不包括变长参数

```python3
from inspect import signature
sig = signature(hello)
print(str(sig)) #获取函数hello的参数部分完整的形式
print(sig.parameters) #这是一个有序字典(OrderedDict)
```

### 函数注解

```python3
def hello(name:str,where:'int > 0' = 10)  -> str:
    return "hello world"
```

注解只会存储在`__annotations__`中，解释器不会做任何其他事情

### 函数式编程

函数式编程关心数据的映射，命令式编程关心解决问题的步骤

函数式编程具有“函数式一等公民”的特性

#### operator

```python3
#包括很多常用运算符的函数
from operator import mul

#itemgetter(1) 相当于 lambda x:x[1],本身就是可迭代对象中的一个元素,itemgetter(1,0)就相当于lambda x:(x[1],x[0])
from operator import itemgetter

for c in sorted(data,key=itemgetter(1)):
   print(c)

#attrgetter(name) 相当于 lambda x:getattr(x,name),attrgetter(name,age) 相当于 lambda x:(getattr(x,name),getattr(x,age))
from operator import attrgetter

info  = attrgetter('name','age')

class Student(object):
	name = "hehe"
	age = 17

stu = Student()

print(info(stu))

from operator import methodcaller

myupper = methodcaller('upper')

myupper("haha") # 相当于 "haha".upper()
```

### 变量作用域

```python3
b=3
def hello():
    print(b)
    b = 1
# 该函数执行时会报错，因为b在函数中定义，解释器就会把b视为局部变量，在打印b的时候就会去找局部变量b，而此时b还没有定义，所以报错
```

### 闭包

函数访问在定义体之外定义的非全局变量

![avatar](/assets/images/closure.png)

```python3
avg = make_averager() #执行过后，make_averager的局部作用域已经消失，对averager的来说，自由变量series已经被绑定
avg(10) # 10
avg(11) # 10.5
avg(12) # 11
print(avg.__code__.co_freevars) # (series,) 
print(avg.__closure__[0].cell_centents)
```

### nonlocal

对于在闭包中给不可变对象赋值，会隐式地将自有变量更改为局部变量，从而导致异常

```python3
def hehe():
    count = 0
    total = 0
    def average(new):
        count += 1  # count是不可变对象，重新赋值相当于默认定义了这个变量，但是实际没有在average内部定义count，执行到这里就会报错
	total += new
	return total/count
    return average
```

```python3
def hehe():
    count = 0
    total = 0
    def average(new):
        nonlocal count,total  #把变量编程自有变量，每次有更新的时候就会更新绑定，python2没有这个关键字，只能通过转换成可变对象进行操作
        count += 1
        total += new
        return total/count
    return average
```

### 弱引用

#### del

del不是删除对象，而是删除对象的引用

#### weakref
python控制台会有`_`绑定结果不为None的表达式的值

```python3
import weakref

a = {1,2}
b = weakref.ref(a)
b()
a = {3,4}
b()
b() is None # Flase
b() is None # True
```

#### WeakValueDictionary

是可变类型的映射，值是对象的弱引用，当被引用法人对象被删除后，对应的对象的键就会被删除

list和dict不能作为弱引用的目标，但是它们的子类可以；int和tuple不能作为弱引用的目标，其子类也不可以

### classmethod staticmethod

classmethod用于装饰类专属的方法，装饰的函数的第一个参数都是指代类，staticmethod就是普通的函数，只是写在了类里面。

### 格式化

```python3
print('1 dao = {money:0.2f}'.format(money=qian))
print(format(42,"b")) #用二进制显示数字42
```

对自定义类使用format，如果没有定义`__format__`，那么久使用继承自object中的`__format__`，就是str()，但是这种情况无法使用格式说明

### 基本的序列协议

实现`__len__`和`__getitem__`，从而支持索引、遍历、in操作

实现了`__setitem__`机会将序列变成可变序列，从而实现一些就地操作，比如就地打乱

### 内置类型子类

内置类型的方法不会调用子类覆盖的方法

![avatar](/assets/images/builtin.png)

但是`__missing__`方法可以正常运行

结论：**不要直接继承内置的类，如果有需要，继承collections中的UserDict、UserList、UserString**，内置类型dict，str，list都是使用C实现的

### 上下文管理器和with

上下文管理器包括`__enter__`和`__exit__`俩个方法，with语句开始运行时，会调用**上下文管理器对象**的`__enter__`方法，运行结束后，会调用`__exit__`方法

```python3
with open("text.txt") as fp: #执行with 后面的表达式得到的结果是上下文管理器对象，不过，把值绑定到目标变量上（as 子句）是在上下文管理器对象上调用 __enter__ 方法的结果
    fp.read()
```

```python3
class LookingClass:

    def __enter__(self):
        import sys
	self.origin_write = sys.stdout.write
	sys.stdout.write = self.reverse_write
	return 'HEHE'

    def reverse_write(self,text):
        self.origin_write(text[::-1])

    def __exit__(self,exc_type,exc_value,traceback):  #异常类，异常实例，traceback对象
        import sys
	sys.stdout.write = self.origin_write
	if exc_type is ZeroDivisionError:
	    print("No")
	    return True
```

### contextlib

#### @contextmanager

通过编写一个类，并且实现`__enter__`和`__exit__`来编写上下文管理器相对比较麻烦，`@contextmanager`装饰器可以优化这个问题

```python3
import contextlib

@contextlib.contextmanager
def looking_glass():
    import sys
    origin_write = sys.stdout.write
    
    def reverse_write(text):
        origin_write(text[::-1])

    sys.stdout.write = reverse_write
    try:
        yield "ASDFG" # with语句会在这里暂停
    except Exception:
        pass
    finally:
        sys.stdout.write = origin_write # 出了with语句，就会执行这句话

with looking_glass() as what:
    print("HAHA")  # AHAH
    print(what)    # GFDSA
```

### 协程

#### yield

![avatar](/assets/images/xiecheng.png)

```python3
def averager():
    total = 0
    count = 0
    average = None
    while True:
        term = yield average
	total += term
	count += 1
	average = total/count

v = averager()
next(v) # 预激协程
v.send(10) # 10
v.send(12) # 11
v.send(14) # 12
```

当协程遇到异常会向上抛出，如果上层没有处理，那么就会导致协程退出

可以在生成器调用throw和close方法停止协程

```python3
def handle():
    while True:
        try:
	    x = yield
	except ZeroDivisionError:
	    print("okok")
	else:
	    print("x is ",x)

h = handle()
next(handle)
handle.send(1)
handle.throw(ZeroDivisionError) #通过调用throw，向协程抛出异常，由于协程有处理，所以可以继续运行
handle.throw(Exception) # 协程终止
```

```python3
from collections import namedtuple
Result = namedtuple('Result', 'count average')

def averager():
    total = 0.0
    count = 0
    average = None
    while True:
        term = yield
        if term is None:
            break
        total += term
        count += 1
        average = total/count

    return Result(count, average)

a = averager()
next(a)
a.send(10)
a.send(20)
try:
    a.send(None)
except StopIteration as exc:
    result = exec.value
```

#### yield from

```python3
def chain(*iterable):
    for it in iterable:
        yield from it

s = 'abc'
t = tuple(range(3))
print(list(chain(s,t))) # ['A', 'B', 'C', 0, 1, 2]
```

yield from x 会调用iter(x)

> yield from 的主要功能是打开双向通道，把最外层的调用方与最内层的子生成器连接起来，这样二者可以直接发送和产出值，还可以直接传入异常，而不用在位于中间的协程中添加大量处理异常的样板代码。有了这个结构，协程可以通过以前不可能的方式委托职责。

